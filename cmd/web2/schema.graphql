"""Marks an element of a GraphQL schema as no longer supported."""
directive @deprecated(
  """
  Explains why this element was deprecated, usually also including a suggestion
      for how to access supported similar data. Formatted in
      [Markdown](https://daringfireball.net/projects/markdown/).
  """
  reason: String = "No longer supported"
) on ENUM_VALUE | FIELD_DEFINITION

"""
Directs the executor to include this field or fragment only when the argument is true.
"""
directive @include(
  """Included when true."""
  if: Boolean!
) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"""
Directs the executor to skip this field or fragment when the argument is true.
"""
directive @skip(
  """Skipped when true."""
  if: Boolean!
) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"""
A Directive provides a way to describe alternate runtime execution and type validation behavior in a GraphQL document.

In some cases, you need to provide options to alter GraphQL's execution behavior in ways field arguments will not suffice, such as conditionally including or skipping a field. Directives provide this by describing additional information to the executor.
"""
type __Directive {
  name: String!
  description: String
  isRepeatable: Boolean!
  locations: [__DirectiveLocation!]!
  args(includeDeprecated: Boolean = false): [__InputValue!]!
}

"""
A Directive can be adjacent to many parts of the GraphQL language, a __DirectiveLocation describes one such possible adjacencies.
"""
enum __DirectiveLocation {
  """Location adjacent to a query operation."""
  QUERY

  """Location adjacent to a mutation operation."""
  MUTATION

  """Location adjacent to a subscription operation."""
  SUBSCRIPTION

  """Location adjacent to a field."""
  FIELD

  """Location adjacent to a fragment definition."""
  FRAGMENT_DEFINITION

  """Location adjacent to a fragment spread."""
  FRAGMENT_SPREAD

  """Location adjacent to an inline fragment."""
  INLINE_FRAGMENT

  """Location adjacent to a variable definition."""
  VARIABLE_DEFINITION

  """Location adjacent to a schema definition."""
  SCHEMA

  """Location adjacent to a scalar definition."""
  SCALAR

  """Location adjacent to an object type definition."""
  OBJECT

  """Location adjacent to a field definition."""
  FIELD_DEFINITION

  """Location adjacent to an argument definition."""
  ARGUMENT_DEFINITION

  """Location adjacent to an interface definition."""
  INTERFACE

  """Location adjacent to a union definition."""
  UNION

  """Location adjacent to an enum definition."""
  ENUM

  """Location adjacent to an enum value definition."""
  ENUM_VALUE

  """Location adjacent to an input object type definition."""
  INPUT_OBJECT

  """Location adjacent to an input object field definition."""
  INPUT_FIELD_DEFINITION
}

"""
One possible value for a given Enum. Enum values are unique values, not a placeholder for a string or numeric value. However an Enum value is returned in a JSON response as a string.
"""
type __EnumValue {
  name: String!
  description: String
  isDeprecated: Boolean!
  deprecationReason: String
}

"""
Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type.
"""
type __Field {
  name: String!
  description: String
  args(includeDeprecated: Boolean = false): [__InputValue!]!
  type: __Type!
  isDeprecated: Boolean!
  deprecationReason: String
}

"""
Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value.
"""
type __InputValue {
  name: String!
  description: String
  type: __Type!

  """
  A GraphQL-formatted string representing the default value for this input value.
  """
  defaultValue: String
  isDeprecated: Boolean!
  deprecationReason: String
}

"""
A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, as well as the entry points for query, mutation, and subscription operations.
"""
type __Schema {
  description: String

  """A list of all types supported by this server."""
  types: [__Type!]!

  """The type that query operations will be rooted at."""
  queryType: __Type!

  """
  If this server supports mutation, the type that mutation operations will be rooted at.
  """
  mutationType: __Type

  """
  If this server support subscription, the type that subscription operations will be rooted at.
  """
  subscriptionType: __Type

  """A list of all directives supported by this server."""
  directives: [__Directive!]!
}

"""
The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.

Depending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name, description and optional `specifiedByURL`, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.
"""
type __Type {
  kind: __TypeKind!
  name: String
  description: String
  specifiedByURL: String
  fields(includeDeprecated: Boolean = false): [__Field!]
  interfaces: [__Type!]
  possibleTypes: [__Type!]
  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]
  inputFields(includeDeprecated: Boolean = false): [__InputValue!]
  ofType: __Type
  isOneOf: Boolean
}

"""An enum describing what kind of type a given `__Type` is."""
enum __TypeKind {
  """Indicates this type is a scalar."""
  SCALAR

  """
  Indicates this type is an object. `fields` and `interfaces` are valid fields.
  """
  OBJECT

  """
  Indicates this type is an interface. `fields`, `interfaces`, and `possibleTypes` are valid fields.
  """
  INTERFACE

  """Indicates this type is a union. `possibleTypes` is a valid field."""
  UNION

  """Indicates this type is an enum. `enumValues` is a valid field."""
  ENUM

  """
  Indicates this type is an input object. `inputFields` is a valid field.
  """
  INPUT_OBJECT

  """Indicates this type is a list. `ofType` is a valid field."""
  LIST

  """Indicates this type is a non-null. `ofType` is a valid field."""
  NON_NULL
}
schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

directive @tag(name: String!) on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION

scalar Any

scalar Duration

input KeepAliveAppInput {
  pkg: String!
  version: String!
}

type KeepAliveAppOutput {
  ok: Boolean!
  registrationRequired: Boolean!
}

type Mutation {
  keepAlive(input: KeepAliveAppInput): KeepAliveAppOutput!
  registerApp(input: RegisterAppInput!): RegisterAppOutput!
}

input Page {
  limit: Int
  page: Int
}

type PageInfo {
  next: Int!
  page: Int!
  perPage: Int!
  prev: Int!
  total: Int!
  totalPage: Int!
}

type Query {
  registeredApps(page: Page!, sort: RegisteredAppsSort, where: RegisteredAppsWhereRules): RegisteredAppsPage
  shellConfiguration(tenantId: String!): ShellConfiguration!
  __schema: __Schema!
  __type(name: String!): __Type
}

enum QueryCondition {
  And
  Or
}

input QueryOperatorAndDate {
  op: QueryOperators!
  value: Time
}

input QueryOperatorAndValue {
  op: QueryOperators!
  value: Any
}

input QueryOperatorFieldAndValue {
  exists: Boolean
  field: String!
  op: QueryOperators!
  value: Any
}

enum QueryOperators {
  Contains
  Equal
  GreaterThan
  GreaterThanOrEqual
  In
  LessThan
  LessThanOrEqual
  NotEqual
  NotIn
  Regex
}

enum QueryType {
  Date
  Deleted
}

input QueryValue {
  value: Any
}

enum RefRoot {
  AppRef
}

enum RegisterAppCategory {
  App
  Dashboard
  Setting
}

input RegisterAppInput {
  apiUrl: String!
  apiWsUrl: String!
  name: String!
  navigation: [RegisterAppNavigationInput]
  package: String!
  proxyApi: Boolean!
  version: String!
}

input RegisterAppModule {
  exposedModule: String
  moduleName: String
  outlet: String
  path: String
}

input RegisterAppNavigationInput {
  authRequired: Boolean
  category: RegisterAppCategory!
  children: [RegisterChildAppNavigationInput]
  hidden: Boolean
  icon: String!
  module: RegisterAppModule!
  proxy: Boolean!
  subTitle: String
  title: String!
}

type RegisterAppOutput {
  id: String!
}

input RegisterAppSlot {
  authRequired: Boolean
  description: String!
  module: RegisterAppSlotModule!
}

input RegisterAppSlotModule {
  exposedModule: String
  moduleName: String
  path: String
}

input RegisterChildAppNavigationInput {
  authRequired: Boolean
  children: [RegisterChildAppNavigationInput]
  icon: String!
  module: RegisterAppModule!
  path: String
  subTitle: String
  title: String!
}

type RegisteredApp {
  createdAt: Time
  name: String
  pkg: String!
  updatedAt: Time
}

input RegisteredAppQueryFields {
  createdAt: QueryOperatorAndDate
  name: QueryOperatorAndValue
  updatedAt: QueryOperatorAndDate
}

type RegisteredAppsPage {
  data: [RegisteredApp]
  page: PageInfo!
}

input RegisteredAppsSort {
  createdAt: SortType
  name: SortType
  updatedAt: SortType
}

input RegisteredAppsWhereRules {
  condition: QueryCondition!
  fields: [RegisteredAppQueryFields]
  rules: [RegisteredAppsWhereRules]
}

enum ShellConfigEventType {
  Added
  Initial
  Rebuild
  Removed
  Updated
}

type ShellConfiguration {
  categories: [ShellNavigationCategory]
  defaultRoute: String
  slots: [ShellNavigationSlot]
}

type ShellConfigurationSubscription {
  configuration: ShellConfiguration!
  eventType: ShellConfigEventType!
}

type ShellNavigation {
  authRequired: Boolean
  children: [ShellNavigationChild]
  healthy: Boolean!
  hidden: Boolean!
  icon: String!
  id: String!
  module: ShellNavigationModule!
  subTitle: String
  title: String!
}

type ShellNavigationCategory {
  category: RegisterAppCategory!
  entries: [ShellNavigation]
  priority: Int!
  title: String!
}

type ShellNavigationChild {
  authRequired: Boolean
  children: [ShellNavigationChild]
  healthy: Boolean!
  icon: String!
  module: ShellNavigationModule!
  subTitle: String
  title: String!
}

type ShellNavigationModule {
  exposedModule: String!
  moduleName: String!
  outlet: String!
  path: String!
  remoteEntry: String!
}

type ShellNavigationSlot {
  authRequired: Boolean
  description: String!
  module: ShellNavigationSlotModule!
  priority: Int
  slot: String!
}

type ShellNavigationSlotModule {
  exposedModule: String!
  moduleName: String!
  path: String!
  remoteEntry: String!
}

input Sort {
  key: String!
  type: SortType!
}

enum SortType {
  ASC
  DES
}

type Subscription {
  shellConfiguration(events: [ShellConfigEventType!]!, tenantId: String!): ShellConfigurationSubscription!
}

type TagValue {
  Value: Any!
}

type TagValues {
  Key: String!
  Values: [TagValue]
}

scalar Time