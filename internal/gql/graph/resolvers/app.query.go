package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"

	"github.com/azarc-io/verathread-gateway/internal/gql/graph"
	"github.com/azarc-io/verathread-gateway/internal/gql/graph/model"
	"github.com/azarc-io/verathread-next-common/common/genericdb"
	gqlutil "github.com/azarc-io/verathread-next-common/util/gql"
)

// RegisteredApps is the resolver for the registeredApps field.
func (r *queryResolver) RegisteredApps(ctx context.Context, page genericdb.Page, where *model.RegisteredAppsWhereRules, sort *model.RegisteredAppsSort) (*model.RegisteredAppsPage, error) {
	query := &genericdb.GenericPagedQuery{
		Page:    gqlutil.ToGenericPage(page),
		Query:   gqlutil.ToGenericQuery(where, &genericdb.GenericRule{}),
		Sort:    gqlutil.GetSortFields(sort),
		Project: gqlutil.GetProjection(model.RefRootAppRef, ctx),
	}

	if data, pageInfo, ok := doGenericPagedQuery[[]*model.RegisteredApp](ctx, r.Opts, "app", query); !ok {
		return nil, nil
	} else {
		return &model.RegisteredAppsPage{
			Data: data,
			Page: pageInfo,
		}, nil
	}
}

// ShellConfiguration is the resolver for the shellConfiguration field.
func (r *queryResolver) ShellConfiguration(ctx context.Context, tenantID string) (*model.ShellConfiguration, error) {
	return r.InternalService.GetAppConfiguration(ctx, tenantID)
}

// Query returns graph.QueryResolver implementation.
func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
