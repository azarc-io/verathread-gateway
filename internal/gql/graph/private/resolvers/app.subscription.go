package pvtresolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"slices"

	"github.com/azarc-io/verathread-gateway/internal/gql/graph/common/model"
	pvtgraph "github.com/azarc-io/verathread-gateway/internal/gql/graph/private"
)

// ShellConfiguration is the resolver for the shellConfiguration field.
func (r *subscriptionResolver) ShellConfiguration(ctx context.Context, tenantID string, events []model.ShellConfigEventType) (<-chan *model.ShellConfigurationSubscription, error) {
	var (
		ch = make(chan *model.ShellConfigurationSubscription, 1)
	)

	// load initial apps config
	if slices.Index(events, model.ShellConfigEventTypeInitial) > -1 {
		if cfg, err := r.InternalService.GetAppConfiguration(ctx, tenantID); err != nil {
			return nil, err
		} else {
			ch <- &model.ShellConfigurationSubscription{
				Configuration: cfg,
				EventType:     model.ShellConfigEventTypeInitial,
			}
		}
	}

	go func() {
		<-ctx.Done()
	}()

	// We return the channel and no error.
	return ch, nil
}

// Subscription returns pvtgraph.SubscriptionResolver implementation.
func (r *Resolver) Subscription() pvtgraph.SubscriptionResolver { return &subscriptionResolver{r} }

type subscriptionResolver struct{ *Resolver }
