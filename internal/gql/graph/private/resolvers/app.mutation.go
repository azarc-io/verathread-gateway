package pvtresolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"net/http"

	"github.com/azarc-io/verathread-gateway/internal/gql/graph/common/model"
	pvtgraph "github.com/azarc-io/verathread-gateway/internal/gql/graph/private"
	gqlutil "github.com/azarc-io/verathread-next-common/util/gql"
)

// RegisterApp is the resolver for the registerApp field.
func (r *mutationResolver) RegisterApp(ctx context.Context, input model.RegisterAppInput) (*model.RegisterAppOutput, error) {
	rsp, err := r.InternalService.RegisterApp(ctx, &input)
	if err != nil {
		gqlutil.AddGeneralError(ctx, err, http.StatusInternalServerError)
		return nil, nil
	}

	return rsp, nil
}

// KeepAlive is the resolver for the keepAlive field.
func (r *mutationResolver) KeepAlive(ctx context.Context, input *model.KeepAliveAppInput) (*model.KeepAliveAppOutput, error) {
	rsp, err := r.InternalService.KeepAlive(ctx, input)
	if err != nil {
		gqlutil.AddGeneralError(ctx, err, http.StatusInternalServerError)
		return nil, nil
	}

	return rsp, nil
}

// Mutation returns pvtgraph.MutationResolver implementation.
func (r *Resolver) Mutation() pvtgraph.MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
