// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/azarc-io/verathread-next-common/common/app"
	"github.com/azarc-io/verathread-next-common/common/genericdb"
)

type Mutation struct {
}

type Query struct {
}

type QueryOperatorAndDate struct {
	Op    QueryOperators `json:"op" bson:"-" query:"op"`
	Value *time.Time     `json:"value,omitempty" bson:"-" query:"value"`
}

type QueryOperatorAndValue struct {
	Op    QueryOperators `json:"op" bson:"-" query:"op"`
	Value interface{}    `json:"value,omitempty" bson:"-" query:"value"`
}

type QueryOperatorFieldAndValue struct {
	Field  string         `json:"field" bson:"-" query:"field"`
	Op     QueryOperators `json:"op" bson:"-" query:"op"`
	Value  interface{}    `json:"value,omitempty" bson:"-" query:"value"`
	Exists *bool          `json:"exists,omitempty" bson:"-" query:"fieldExists"`
}

type QueryValue struct {
	Value interface{} `json:"value,omitempty" bson:"-" query:"value"`
}

type RegisteredApp struct {
	Pkg       string     `json:"pkg" bson:"package" yaml:"package"`
	Name      *string    `json:"name,omitempty" bson:"name" yaml:"name"`
	CreatedAt *time.Time `json:"createdAt,omitempty" bson:"created_at" yaml:"created_at"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty" bson:"updated_at" yaml:"updated_at"`
}

type RegisteredAppQueryFields struct {
	CreatedAt *QueryOperatorAndDate  `json:"createdAt,omitempty" bson:"created_at" yaml:"created_at" queryType:"Date"`
	UpdatedAt *QueryOperatorAndDate  `json:"updatedAt,omitempty" bson:"updated_at" yaml:"updated_at" queryType:"Date"`
	Name      *QueryOperatorAndValue `json:"name,omitempty" bson:"name" yaml:"name"`
}

type RegisteredAppsPage struct {
	Data []*RegisteredApp    `json:"data,omitempty" bson:"-"`
	Page *genericdb.PageInfo `json:"page" bson:"-"`
}

type RegisteredAppsSort struct {
	CreatedAt *genericdb.SortType `json:"createdAt,omitempty" bson:"created_at" yaml:"created_at" queryType:"Date"`
	UpdatedAt *genericdb.SortType `json:"updatedAt,omitempty" bson:"updated_at" yaml:"updated_at" queryType:"Date"`
	Name      *genericdb.SortType `json:"name,omitempty" bson:"name" yaml:"name"`
}

type RegisteredAppsWhereRules struct {
	Condition genericdb.QueryCondition    `json:"condition" bson:"-" query:"condition"`
	Fields    []*RegisteredAppQueryFields `json:"fields,omitempty" bson:"-" query:"op"`
	Rules     []*RegisteredAppsWhereRules `json:"rules,omitempty" bson:"-" query:"queryRules"`
}

type ShellConfiguration struct {
	DefaultRoute *string                    `json:"defaultRoute,omitempty" bson:"-"`
	Categories   []*ShellNavigationCategory `json:"categories,omitempty" bson:"-"`
	Slots        []*ShellNavigationSlot     `json:"slots,omitempty" bson:"-"`
}

type ShellConfigurationSubscription struct {
	Configuration *ShellConfiguration  `json:"configuration" bson:"-"`
	EventType     ShellConfigEventType `json:"eventType" bson:"-"`
}

type ShellNavigation struct {
	ID           string                  `json:"id" bson:"_id" yaml:"_id"`
	Title        string                  `json:"title" bson:"title" yaml:"title"`
	SubTitle     *string                 `json:"subTitle,omitempty" bson:"subTitle" yaml:"subTitle"`
	AuthRequired *bool                   `json:"authRequired,omitempty" bson:"authRequired" yaml:"authRequired"`
	Children     []*ShellNavigationChild `json:"children,omitempty" bson:"children" yaml:"children"`
	Healthy      bool                    `json:"healthy" bson:"available" yaml:"available"`
	Module       *ShellNavigationModule  `json:"module" bson:"module" yaml:"module"`
	Icon         string                  `json:"icon" bson:"icon" yaml:"icon"`
	Hidden       bool                    `json:"hidden" bson:"hidden" yaml:"hidden"`
}

type ShellNavigationCategory struct {
	Title    string                  `json:"title" bson:"-"`
	Priority int                     `json:"priority" bson:"-"`
	Category app.RegisterAppCategory `json:"category" bson:"-"`
	Entries  []*ShellNavigation      `json:"entries,omitempty" bson:"-"`
}

type ShellNavigationChild struct {
	Title        string                  `json:"title" bson:"title" yaml:"title"`
	SubTitle     *string                 `json:"subTitle,omitempty" bson:"subTitle" yaml:"subTitle"`
	Module       *ShellNavigationModule  `json:"module" bson:"module" yaml:"module"`
	AuthRequired *bool                   `json:"authRequired,omitempty" bson:"authRequired" yaml:"authRequired"`
	Children     []*ShellNavigationChild `json:"children,omitempty" bson:"children" yaml:"children"`
	Healthy      bool                    `json:"healthy" bson:"available" yaml:"available"`
	Icon         string                  `json:"icon" bson:"icon" yaml:"icon"`
}

type ShellNavigationModule struct {
	Path          string `json:"path" bson:"path" yaml:"path"`
	RemoteEntry   string `json:"remoteEntry" bson:"remoteEntry" yaml:"remoteEntry"`
	ExposedModule string `json:"exposedModule" bson:"exposedModule" yaml:"exposedModule"`
	ModuleName    string `json:"moduleName" bson:"moduleName" yaml:"moduleName"`
	Outlet        string `json:"outlet" bson:"outlet" yaml:"outlet"`
}

type ShellNavigationSlot struct {
	Priority     *int                       `json:"priority,omitempty" bson:"-"`
	Slot         string                     `json:"slot" bson:"slot" yaml:"slot"`
	Description  string                     `json:"description" bson:"description" yaml:"description"`
	AuthRequired *bool                      `json:"authRequired,omitempty" bson:"authRequired" yaml:"authRequired"`
	Module       *ShellNavigationSlotModule `json:"module" bson:"module" yaml:"module"`
}

type ShellNavigationSlotModule struct {
	Path          string `json:"path" bson:"path" yaml:"path"`
	RemoteEntry   string `json:"remoteEntry" bson:"remoteEntry" yaml:"remoteEntry"`
	ExposedModule string `json:"exposedModule" bson:"exposedModule" yaml:"exposedModule"`
	ModuleName    string `json:"moduleName" bson:"moduleName" yaml:"moduleName"`
}

type Subscription struct {
}

type TagValue struct {
	Value interface{} `json:"Value" bson:"value" yaml:"value"`
}

type TagValues struct {
	Key    string      `json:"Key" bson:"key" yaml:"key"`
	Values []*TagValue `json:"Values,omitempty" bson:"values" yaml:"values"`
}

type QueryOperators string

const (
	QueryOperatorsEqual              QueryOperators = "Equal"
	QueryOperatorsNotEqual           QueryOperators = "NotEqual"
	QueryOperatorsContains           QueryOperators = "Contains"
	QueryOperatorsIn                 QueryOperators = "In"
	QueryOperatorsNotIn              QueryOperators = "NotIn"
	QueryOperatorsGreaterThan        QueryOperators = "GreaterThan"
	QueryOperatorsLessThan           QueryOperators = "LessThan"
	QueryOperatorsLessThanOrEqual    QueryOperators = "LessThanOrEqual"
	QueryOperatorsGreaterThanOrEqual QueryOperators = "GreaterThanOrEqual"
	QueryOperatorsRegex              QueryOperators = "Regex"
)

var AllQueryOperators = []QueryOperators{
	QueryOperatorsEqual,
	QueryOperatorsNotEqual,
	QueryOperatorsContains,
	QueryOperatorsIn,
	QueryOperatorsNotIn,
	QueryOperatorsGreaterThan,
	QueryOperatorsLessThan,
	QueryOperatorsLessThanOrEqual,
	QueryOperatorsGreaterThanOrEqual,
	QueryOperatorsRegex,
}

func (e QueryOperators) IsValid() bool {
	switch e {
	case QueryOperatorsEqual, QueryOperatorsNotEqual, QueryOperatorsContains, QueryOperatorsIn, QueryOperatorsNotIn, QueryOperatorsGreaterThan, QueryOperatorsLessThan, QueryOperatorsLessThanOrEqual, QueryOperatorsGreaterThanOrEqual, QueryOperatorsRegex:
		return true
	}
	return false
}

func (e QueryOperators) String() string {
	return string(e)
}

func (e *QueryOperators) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = QueryOperators(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid QueryOperators", str)
	}
	return nil
}

func (e QueryOperators) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type QueryType string

const (
	QueryTypeDate    QueryType = "Date"
	QueryTypeDeleted QueryType = "Deleted"
)

var AllQueryType = []QueryType{
	QueryTypeDate,
	QueryTypeDeleted,
}

func (e QueryType) IsValid() bool {
	switch e {
	case QueryTypeDate, QueryTypeDeleted:
		return true
	}
	return false
}

func (e QueryType) String() string {
	return string(e)
}

func (e *QueryType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = QueryType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid QueryType", str)
	}
	return nil
}

func (e QueryType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type RefRoot string

const (
	RefRootAppRef RefRoot = "AppRef"
)

var AllRefRoot = []RefRoot{
	RefRootAppRef,
}

func (e RefRoot) IsValid() bool {
	switch e {
	case RefRootAppRef:
		return true
	}
	return false
}

func (e RefRoot) String() string {
	return string(e)
}

func (e *RefRoot) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RefRoot(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RefRoot", str)
	}
	return nil
}

func (e RefRoot) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ShellConfigEventType string

const (
	ShellConfigEventTypeInitial ShellConfigEventType = "Initial"
	ShellConfigEventTypeUpdated ShellConfigEventType = "Updated"
	ShellConfigEventTypeRemoved ShellConfigEventType = "Removed"
	ShellConfigEventTypeAdded   ShellConfigEventType = "Added"
	ShellConfigEventTypeRebuild ShellConfigEventType = "Rebuild"
)

var AllShellConfigEventType = []ShellConfigEventType{
	ShellConfigEventTypeInitial,
	ShellConfigEventTypeUpdated,
	ShellConfigEventTypeRemoved,
	ShellConfigEventTypeAdded,
	ShellConfigEventTypeRebuild,
}

func (e ShellConfigEventType) IsValid() bool {
	switch e {
	case ShellConfigEventTypeInitial, ShellConfigEventTypeUpdated, ShellConfigEventTypeRemoved, ShellConfigEventTypeAdded, ShellConfigEventTypeRebuild:
		return true
	}
	return false
}

func (e ShellConfigEventType) String() string {
	return string(e)
}

func (e *ShellConfigEventType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ShellConfigEventType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ShellConfigEventType", str)
	}
	return nil
}

func (e ShellConfigEventType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
