name: 'Configure'
description: 'Checkout & Configure Requirements'
inputs:
  aws-access-key-id:
    required: false
    description: "The aws-access-key-id used to authenticate with AWS"
  aws-secret-access-key:
    required: false
    description: "The aws-secret-access-key used to authenticate with AWS"
  aws-region:
    required: false
    description: "The aws region to use"
    default: us-east-1
  aws-region-codeartifact:
    required: false
    description: "The aws region to use for code artifact"
    default: us-east-1
  aws-account-id:
    required: false
    description: "The aws account id used to authenticate with code artifact"
  verathread-repository-name:
    required: false
    description: "The name of the repository to create"
  agent-repository-name:
    required: false
    description: "The name of the repository to create"
  registry:
    required: false
    description: "The registry to authenticate to"
  registry-user:
    required: false
    description: "The username used to authenticate with Nexus"
  registry-pass:
    required: false
    description: "The password used to authenticate with Nexus"
  cache-registry:
    required: false
    description: "The cache registry to authenticate to"
  cache-registry-user:
    required: false
    description: "The username used to authenticate with the caching registry"
  cache-registry-pass:
    required: false
    description: "The password used to authenticate with the caching registry"
  dockerhub-user:
    required: false
    description: "The username used to authenticate with Dockerhub"
  dockerhub-pass:
    required: false
    description: "The password used to authenticate with Dockerhub"
  npmrc-output-path:
    required: false
    description: "The path to write the .npmrc file to"
  npmrc-fontawesome-token:
    required: false
    description: "The token to add to the .npmrc that provides access to the fontawesome repository"
  use-sudo:
    required: false
    description: "True if sudo should be used when executing shell commands"
  jira-base-url:
    required: false
    description: "The base url for Jira"
  jira-user-email:
    required: false
    description: "The Jira user email address"
  jira-api-token:
    required: false
    description: "The Jira API token"
outputs:
  verathread-repository-uri:
    description: 'The docker registry to use'
    value: ${{ steps.ecr-verathread.outputs.repository-uri }}
  agent-repository-uri:
    description: 'The docker registry to use'
    value: ${{ steps.ecr-agent.outputs.repository-uri }}
  branch-name:
    description: "Branch name"
    value: ${{steps.branch-name.outputs.head_ref_branch}}
  is-tag:
    description: "True if branch is a tag"
    value: ${{steps.branch-name.outputs.is_tag}}
  tag:
    description: "Tag name"
    value: ${{steps.branch-name.outputs.tag}}
  issue:
    description: "The Jira Issue"
    value: ${{ steps.issue.outputs.issue }}
runs:
  using: "composite"
  steps:
    - name: "Docker Registry Login"
      uses: docker/login-action@v2.0.0
      if: inputs.registry == '' && inputs.dockerhub-user != '' && inputs.dockerhub-pass != ''
      with:
        registry: ${{ inputs.registry }}
        username: ${{ inputs.registry-user }}
        password: ${{ inputs.registry-pass }}
    - name: "Dockerhub Registry Login"
      uses: docker/login-action@v2.0.0
      if: inputs.registry != '' && inputs.dockerhub-user != '' && inputs.dockerhub-pass != ''
      with:
        username: ${{ inputs.dockerhub-user }}
        password: ${{ inputs.dockerhub-pass }}
    - name: "Cache Registry Login"
      uses: docker/login-action@v2.0.0
      if: inputs.cache-registry != ''
      with:
        registry: ${{ inputs.cache-registry }}
        username: ${{ inputs.cache-registry-user }}
        password: ${{ inputs.cache-registry-pass }}
    - name: "AWS Credentials"
      uses: aws-actions/configure-aws-credentials@v4
      if: inputs.aws-access-key-id != '' && inputs.aws-secret-access-key != ''
      with:
        aws-access-key-id: ${{ inputs.aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
        aws-region: ${{ inputs.aws-region }}
        mask-aws-account-id: 'no'
    - name: "Login to Amazon ECR"
      if: inputs.aws-access-key-id != '' && inputs.aws-secret-access-key != ''
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    - name: "AWS ECR Create Verathread Repo"
      id: ecr-verathread
      if: inputs.verathread-repository-name != '' && inputs.aws-access-key-id != '' && inputs.aws-secret-access-key != ''
      uses: int128/create-ecr-repository-action@v1.254.0
      with:
        repository: ${{ inputs.verathread-repository-name }}
    - name: "AWS ECR Create Agent Repo"
      id: ecr-agent
      if: inputs.agent-repository-name != '' && inputs.aws-access-key-id != '' && inputs.aws-secret-access-key != ''
      uses: int128/create-ecr-repository-action@v1.254.0
      with:
        repository: ${{ inputs.agent-repository-name }}
    - name: "Login To Jira"
      uses: azarc-io/gajira-login@master
      if: inputs.jira-api-token != '' && inputs.jira-user-email != '' && inputs.jira-base-url != ''
      env:
        JIRA_BASE_URL: ${{ inputs.jira-base-url }}
        JIRA_USER_EMAIL: ${{ inputs.jira-user-email }}
        JIRA_API_TOKEN: ${{ inputs.jira-api-token }}
#    - name: "Login To Code Artifact"
#      uses: azarc-io/codeartifact@v0.0.6
#      if: inputs.aws-account-id != '' && inputs.aws-access-key-id != '' && inputs.aws-secret-access-key != ''
#      id: codeartifact
#      with:
#        region: ${{ inputs.aws-region-codeartifact }}
#        domain: npm
#        owner: ${{ inputs.aws-account-id }}
#        type: npm
#        repo: npm-store
#        npmrc-output-path: ${{ github.workspace }}/${{ inputs.npmrc-output-path }}
    - name: "Export Code Artifact Token"
      shell: bash
      if: inputs.aws-account-id != '' && inputs.aws-access-key-id != '' && inputs.aws-secret-access-key != ''
      run: |
        echo CODEARTIFACT_AUTH_TOKEN=$(aws codeartifact get-authorization-token --domain npm --domain-owner ${{ inputs.aws-account-id }} --query authorizationToken --output text --region ${{ inputs.aws-region-codeartifact }}) >> $GITHUB_ENV
    - name: "Get branch name"
      id: branch-name
      uses: tj-actions/branch-names@v6
    - name: Find Issue
      uses: azarc-io/gajira-find-issue-key@master
      id: issue
      if: inputs.jira-api-token != '' && inputs.jira-user-email != '' && inputs.jira-base-url != ''
      with:
        string: ${{steps.branch-name.outputs.head_ref_branch}}
