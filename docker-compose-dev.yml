services:
  ##################################################################################
  # GLOBAL COMMON SERVICES
  ##################################################################################

  shell-fe:
    build:
      context: .
      dockerfile: "deployment/docker/web/Dockerfile.dev"
    networks:
      - frontend-network
    ports:
      - "3000:3000"
    environment:
      DAPR_PLACEMENT_METADATA_ENABLED: true
      NODE_ENV: development
    develop:
      watch:
        - action: sync
          path: cmd/web
          target: /src

  example-fe:
    build:
      context: .
      dockerfile: "example/docker/web/Dockerfile.dev"
    networks:
      - frontend-network
    ports:
      - "3001:3001"
    environment:
      DAPR_PLACEMENT_METADATA_ENABLED: true
      NODE_ENV: development
    develop:
      watch:
        - action: sync
          path: example/web
          target: /src

  gateway:
    build:
      context: .
      dockerfile: "deployment/docker/app/Dockerfile.dev"
      args:
        GITHUB_PAT_TOKEN: ${GITHUB_PAT_TOKEN}
    networks:
      - frontend-network
    environment:
      CONFIG_DIR: cmd/app/config
      BASE_CONTEXT: docker
      DAPRD_BIN_PATH: /src/.data/bin
    ports:
      - "6010:6010"
    depends_on:
      - mongodb_dev
    volumes:
      - ./internal:/src/internal
      - ./cmd/app:/src/cmd/app
    develop:
      watch:
        - action: sync
          path: cmd/app
          target: /src
        - action: sync
          path: internal
          target: /src
        - action: sync
          path: go.*
          target: /src

  example:
    build:
      context: .
      dockerfile: "example/docker/app/Dockerfile.dev"
      args:
        GITHUB_PAT_TOKEN: ${GITHUB_PAT_TOKEN}
    networks:
      - frontend-network
    environment:
      CONFIG_DIR: app/config
      BASE_CONTEXT: docker
      DAPRD_BIN_PATH: /src/.data/bin
    ports:
      - "6110:6110"
    depends_on:
      - gateway
    volumes:
      - ./example/app:/src/example/app
    develop:
      watch:
        - action: sync
          path: example/app
          target: /src/example/app
        - action: sync
          path: go.*
          target: /src

  mongodb_dev:
    image: mongo:latest
    container_name: mongodb_dev
    environment:
      MONGO_APP_DATABASE: vth-gateway
      MONGO_REPLICA_HOST: host.docker.internal
      MONGO_REPLICA_PORT: 27018
    entrypoint: >
      /bin/bash -c '
      echo "rs.initiate()" > /docker-entrypoint-initdb.d/1-init-replicaset.js &&
      echo "db = db.getSiblingDB(process.env[$0]);" > /docker-entrypoint-initdb.d/2-init-db-collection.js &&
      echo "db.createCollection($1, { capped: false });" >> /docker-entrypoint-initdb.d/2-init-db-collection.js &&
      echo "db.init.insert([{ message: $2 }]);" >> /docker-entrypoint-initdb.d/2-init-db-collection.js &&
      /usr/local/bin/docker-entrypoint.sh mongod --replSet rs0 --bind_ip_all --noauth' "'MONGO_APP_DATABASE'" "'init'" "'db initialized successfully'"
    networks:
      - frontend-network
    ports:
      - "27018:27017"
    volumes:
      - ./.data/mongodb:/data/db
      - ./.data/mongodb/opt:/opt/keyfile/

  placement:
    image: "daprio/dapr"
    command: [ "./placement", "-port", "50006" ]
    networks:
      - frontend-network
    ports:
      - "8080:8080"
      - "50006:50006"
    environment:
      DAPR_PLACEMENT_METADATA_ENABLED: true

networks:
  frontend-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.16.238.0/24
