apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "service.fullname" . }}
  namespace: {{ .Release.Namespace | quote }}
  {{- with .Values.annotations }}
  annotations:
    {{- range $key, $value := . }}
      {{- printf "%s: %s" $key (tpl $value $ | quote) | nindent 4 }}
      {{- end }}
  {{- end }}
  labels:
    timestamp: {{ now | date "20060102150405" | quote }}
    deployment-name: {{ include "service.fullname" . }}
    verathread.com/scrape-logs: "true"
    {{- include "service.labels" . | nindent 4 }}
    {{- with .Values.commonLabels }}
    {{- range $key, $value := . }}
    {{- printf "%s: %s" $key (tpl $value $ | quote) | nindent 4 }}
    {{- end }}
    {{- end }}
spec:
  serviceName: {{ include "service.fullname" . }}
  replicas: {{ .Values.replicas }}
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      deployment-name: {{ include "service.fullname" . }}
      {{- include "service.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        {{- range $key, $value := .Values.annotations }}
          {{- printf "%s: %s" $key (tpl $value $ | quote) | nindent 8 }}
          {{- end }}
      labels:
        timestamp: {{ now | date "20060102150405" | quote }}
        deployment-name: {{ include "service.fullname" . }}
        {{- include "service.selectorLabels" . | nindent 8 }}
        {{- with .Values.commonLabels }}
        {{- range $key, $value := . }}
        {{- printf "%s: %s" $key (tpl $value $ | quote) | nindent 8 }}
        {{- end }}
        {{- end }}
    spec:
      {{- if .Values.serviceAccount.create }}
      serviceAccountName: {{ .Values.serviceAccount.name }}
      {{- end }}
      containers:
        - name: {{ include "service.fullname" . }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.mr_tag | default .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - containerPort: {{ .Values.bind.http }}
              name: http

          {{- if eq .Values.dev true }}
            - containerPort: {{ .Values.bind.debug }}
              name: debug
          {{- end }}
          readinessProbe:
            httpGet:
              path: /health
              port: {{ .Values.bind.http }}
            periodSeconds: 5
            failureThreshold: 3
            initialDelaySeconds: 5
          livenessProbe:
            httpGet:
              path: /health
              port: {{ .Values.bind.http }}
            periodSeconds: 5
            failureThreshold: 3
            initialDelaySeconds: 5
          volumeMounts:
            - name: configuration
              readOnly: true
              mountPath: /config/config.yaml
              subPath: config.yaml
            {{- range $key, $value := .Values.extraConfiguration }}
            - name: configuration
              mountPath: "/{{ $key }}"
              subPath: "{{ $key }}"
              readOnly: true
            {{- end }}
          {{- if .Values.fileStorage.enabled }}
            - name: {{ include "service.fullname" . }}-pvc
              mountPath: {{ .Values.fileStorage.storageDirectory }}
          {{- end }}
            - name: static-files
              mountPath: /web
          env:
            - name: MICRO_SERVICE_ID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: SERVICE_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: REVISION
              value: {{ .Values.revision | quote }}
            {{- range $name, $value := .Values.extraEnvVars }}
            - name: {{ $name | toYaml }}
              value: {{ $value | toString | toYaml }}
            {{- end }}
      {{- if eq .Values.dev false }}
      initContainers:
      {{- end }}
        - name: web
          image: "{{ .Values.image.web_repository }}:{{ .Values.image.web_repository_tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
          volumeMounts:
            - name: static-files
              mountPath: /web
              readOnly: false

      nodeSelector:
      {{ toYaml .Values.nodeSelector | indent 8 }}
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
      {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- tpl . $ | nindent 8 }}
      {{- end }}
      topologySpreadConstraints:
        - labelSelector:
            matchLabels:
              deployment-name: {{ include "service.fullname" . }}
          maxSkew: 1
          topologyKey: kubernetes.io/hostname
          whenUnsatisfiable: ScheduleAnyway
      volumes:
        - name: configuration
          configMap:
            name: {{ include "service.fullname" . }}
            items:
              - key: config.yaml
                path: config.yaml
            defaultMode: 365
        - name: static-files
          emptyDir: { }
  volumeClaimTemplates:
  {{- if and .Values.fileStorage.enabled (not .Values.fileStorage.existingClaim) }}
    - metadata:
        name: {{ include "service.fullname" . }}-pvc
        {{- if .Values.fileStorage.annotations }}
        annotations:
        {{- range $key, $value := .Values.fileStorage.annotations }}
          {{ $key }}: {{ $value | quote }}
        {{- end }}
        {{- end }}
      spec:
        accessModes:
        {{- range .Values.fileStorage.accessModes }}
          - {{ . | quote }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.fileStorage.size }}
        {{- if .Values.fileStorage.storageClassName }}
        storageClassName: {{ .Values.fileStorage.storageClassName | quote }}
        {{- end }}
  {{- end }}
