replicas: 1
nodeSelector: {}
nameOverride: "gateway"
fullnameOverride: "gateway"
imagePullSecrets:
  - name: ghcr-login-secret
# if using traefik as your proxy
traefik: "yes"
# disables deployment of any proxy middle wares
middleware_enabled: "no"
# local dev mode
dev: false
# hmr for the front end
hmr: false
fileStorage:
  enabled: false
# Custom Service account management
serviceAccount:
  # Whether to create service account or not
  create: true
  # Name of the service account
  name: gateway-svc-account
image:
  # the gateway image
  repository: ghcr.io/azarc-io/verathread-gateway/gateway-be
  tag: v1.62.0
  # the web sidecar, if hmr is true then the sidecar will run node and build the web app
  # otherwise it will be a lightweight container that hosts the files on behalf of the gateway
  web_repository: ghcr.io/azarc-io/verathread-gateway/gateway-fe
  web_repository_tag: v1.62.0
  pullPolicy: Always
# port bindings
bind:
  publicHttp: &bindPublicHttpPort 6010
  privateHttp: &bindPrivateHttpPort 6011
  hmr: 3000
  debug: 40000
# labels to attach to all resources
commonLabels:
  verathread.com/scrape-logs: "true"
# pod annotations
annotations: {}
# handles routing, is split into two / for web and /graphql and /modules for api and static file proxy
ingress:
  # If `true`, an Ingress is created
  enabled: true
  # Ingress annotations
  annotations:
    traefik.ingress.kubernetes.io/buffering: |
      maxrequestbodybytes: 3750000
      memrequestbodybytes: 3750000
  # Additional Ingress labels
  labels: {}
  # List of rules for the Ingress
  rules:
    - host: dev.cluster.local
      service: gateway
      servicePort: public-http
      paths:
        - /graphql
        - /app
        - /health
        - /
# Service configuration
configuration:
  name: gateway
  id: ${MICRO_SERVICE_ID}
  database:
    dsn: mongodb%3A%2F%2Fmongodb%3A27017%2F%3FreplicaSet%3Drs0%26tls%3Dfalse%26connect%3Ddirect%26retryWrites%3Dtrue%26w%3Dmajority
    name: vth-gateway
  auth:
    domain: "https://dev-iq3b9wdl.us.auth0.com"
    client_id: ""
    client_secret: ""
    jwt:
      auth_domain: https://auth.dev.cloud.azarc.dev
      aud: https://verathread.com/api/verify
      iss: https://verathread.com/
      claims: https://verathread.com/claims
  cluster:
    enabled: true
  redis:
    address: keydb:6379
  nats:
    address: nats://nats:4222
    drain: true
  logger:
    level: info
    mode: dev # or prd
  http:
    public:
      address: ${BIND_ADDRESS}
      port: *bindPublicHttpPort
    private:
      address: ${BIND_ADDRESS}
      port: *bindPrivateHttpPort
    cors:
      allow_credentials: true
      allow_origins:
        - '*'
      allow_headers:
        - '*'
      allow_methods:
        - POST
        - GET
        - PUT
        - DELETE
        - PATCH
        - HEAD
  gateway:
    web_dir: /web
    web_proxy: ""
    backoffice_org: org_hiUmCjtFR7ZgEckN
    assets_to_scan:
      - remoteEntry.js
    metrics:
      address: ${BIND_ADDRESS}
      port: 6015
    services: {}
# environment variables attached to the pod
extraEnvVars:
  BASE_CONTEXT: config
  CONFIG_DIR: /config
  BIND_ADDRESS: 0.0.0.0
